customElements.define("rtx-slider",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=`\n      <style>\n        :host {\n          position: relative;\n          display: block;\n          content: "";\n          box-sizing: border-box;\n          background-color: #ddd;\n          border: 1px solid #888;\n          border-radius: 6px;\n          height: 6px;\n          width: 173px;\n          margin: 10px 0;\n          user-select: none;\n          cursor: pointer;\n        }\n        #thumb {\n          position: absolute;\n          display: block;\n          content: "";\n          box-sizing: border-box;\n          background-color: #fff;\n          border-radius: 18px 0 0 18px;\n          margin: 0;\n          left: 0;\n          right: 0;\n          top: 0;\n          bottom: 0;\n          /*transition: width 0.15s linear;*/\n        }\n        #thumb::after {\n          position: absolute;\n          display: block;\n          box-sizing: border-box;\n          content: "";\n          width: 20px;\n          height: 20px;\n          border: 1px solid #888;\n          border-radius: 10px;\n          top: -8px;\n          right: -8px;\n          background-color: #fff;\n        }\n        :host(:focus) #thumb::after {\n          background-color: #fafaff;\n        }\n        #track {\n          position: absolute;\n          display: block;\n          content: "";\n          box-sizing: border-box;\n          /*background-color: rgba(255,0,0,0.2);*/\n          left: 8px;\n          right: 8px;\n          top: -8px;\n          bottom: -8px;\n        }\n        #track-start {\n          position: absolute;\n          display: block;\n          content: "";\n          box-sizing: border-box;\n          /*background-color: rgba(0,255,0,0.2);*/\n          left: -1px;\n          width: 9px;\n          top: -8px;\n          bottom: -8px;\n        }\n        #track-end {\n          position: absolute;\n          display: block;\n          content: "";\n          box-sizing: border-box;\n          /*background-color: rgba(0,255,0,0.2);*/\n          right: -1px;\n          width: 9px;\n          top: -8px;\n          bottom: -8px;\n        }\n      </style>\n\n      <div id="thumb"></div>\n      <div id="track"></div>\n      <div id="track-start"></div>\n      <div id="track-end"></div>\n    `,this.thumb=this.shadowRoot.querySelector("#thumb"),this.track=this.shadowRoot.querySelector("#track"),this.trackStart=this.shadowRoot.querySelector("#track-start"),this.trackEnd=this.shadowRoot.querySelector("#track-end"),this.lastLeftPos=-1,this.listeners=new Map}get value(){return+this.getAttribute("value")||0}set value(t){this.setAttribute("value",+Math.min(this.max,Math.max(this.min,+t)))}get min(){return+this.getAttribute("min")||0}set min(t){this.setAttribute("min",+t)}get max(){return+this.getAttribute("max")||100}set max(t){this.setAttribute("max",+t)}get step(){return+this.getAttribute("step")||.01}set step(t){this.setAttribute("step",+t)}static get observedAttributes(){return["value","min","max","step"]}on(t,e){this.listeners.has(t)||this.listeners.set(t,[]),this.listeners.get(t).push(e)}off(t){this.listeners.has(t)&&this.listeners.delete(t)}trigger(t,e){this.listeners.has(t)&&this.listeners.get(t).forEach(t=>{t(e)})}setValue(t){let e=t/this.track.clientWidth,i=this.min+e*(this.max-this.min),n=this.step.toString().includes(".")?this.step.toString().split(".")[1].length:0,s=(Math.ceil(i/this.step)*this.step).toFixed(n);this.value!=s&&(this.value=s)}updateThumb(){let t=this.track.clientWidth-2,e=11+(this.value-this.min)/(this.max-this.min)*t;this.thumb.style.width=`${e}px`,e!==this.lastLeftPos&&this.trigger("changed",this.value),this.lastLeftPos=e}connectedCallback(){this.tabIndex=0,this.track.addEventListener("mousemove",t=>{1===t.buttons&&this.setValue(t.layerX)}),this.track.addEventListener("click",t=>{this.setValue(t.layerX)}),this.trackStart.addEventListener("click",t=>{this.value=this.min}),this.trackEnd.addEventListener("click",t=>{this.value=this.max}),this.addEventListener("keydown",t=>{"ArrowLeft"!==t.code&&"NumpadSubtract"!==t.code||(this.value-=this.step),"ArrowRight"!==t.code&&"NumpadAdd"!==t.code||(this.value+=this.step),"Home"===t.code&&(this.value=this.min),"End"===t.code&&(this.value=this.max)})}disconnectedCallback(){}attributeChangedCallback(t,e,i,n){this.updateThumb()}adoptedCallback(t,e){}});
